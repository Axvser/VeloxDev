<Canvas x:Class="VeloxDev.WPF.WorkflowSystem.Views.Factory"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:VeloxDev.WPF.WorkflowSystem.Views"
             xmlns:vm="clr-namespace:VeloxDev.WPF.WorkflowSystem.ViewModels"
             xmlns:dc="clr-namespace:VeloxDev.WPF.WorkflowSystem.Decorators"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800"
             d:DataContext="{d:DesignInstance Type=vm:FactoryViewModel, IsDesignTimeCreatable=True}">

    <Button Width="200" Height="100"
            Command="{Binding LoadCommand}" 
            CommandParameter="{Binding RelativeSource={RelativeSource Self}}"/>

    <!--Children 提供【节点】视图模型-->
    <!--Tips : 使用【 TemplateSelector 】以实现多样的节点交互视图-->
    <ItemsControl ItemsSource="{Binding Children}">
        <ItemsControl.ItemTemplate>
            <DataTemplate>
                <!--单个节点的渲染、交互逻辑,使用Anchor来锚定元素-->
                <Button Canvas.Left="{Binding Anchor.Left}"
                        Canvas.Top="{Binding Anchor.Top}"
                        Panel.ZIndex="{Binding Anchor.Layer}"
                        IsEnabled="{Binding IsEnabled}"/>
            </DataTemplate>
        </ItemsControl.ItemTemplate>
    </ItemsControl>

    <!--Connectors 提供【节点连接关系】视图模型-->
    <!--Tips : 使用【 TemplateSelector + 装饰器模式 】以实现多样的连接绘制-->
    <ItemsControl ItemsSource="{Binding Connectors}">
        <ItemsControl.ItemTemplate>
            <DataTemplate>
                <!--单个连接的渲染、交互逻辑,使用两个Anchor来描述连接信息-->
                <dc:ConnectionDecorator StartAnchor="{Binding StartAnchor}"
                                        EndAnchor="{Binding EndAnchor}"/>
            </DataTemplate>
        </ItemsControl.ItemTemplate>
    </ItemsControl>
</Canvas>
