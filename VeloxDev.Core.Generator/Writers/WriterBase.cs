using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Text;
using VeloxDev.Core.Generator.Base;

namespace VeloxDev.Core.Generator.Writers
{
    public abstract class WriterBase : ICodeWriter
    {
        public const string NAMESPACE_VELOX_MONO = "global::VeloxDev.Core.Mono";
        public const string NAMESPACE_VELOX_IMVVM = "global::VeloxDev.Core.Interfaces.MVVM";
        public const string NAMESPACE_VELOX_MVVM = "global::VeloxDev.Core.MVVM";
        public const string NAMESPACE_VELOX_AOP = "global::VeloxDev.Core.AopInterfaces";
        public const string NAMESPACE_SYSTEM_MVVM = "global::System.ComponentModel";
        public const string NAMESPACE_VELOX_IWORKFLOW = "global::VeloxDev.Core.Interfaces.WorkflowSystem";
        public const string NAMESPACE_VELOX_WORKFLOW = "global::VeloxDev.Core.WorkflowSystem";

        public abstract bool CanWrite();
        public abstract string GetFileName();
        public abstract string Write();

        public virtual void Initialize(ClassDeclarationSyntax classDeclaration, INamedTypeSymbol namedTypeSymbol)
        {
            Syntax = classDeclaration;
            Symbol = namedTypeSymbol;
        }

        public ClassDeclarationSyntax? Syntax { get; protected set; }
        public INamedTypeSymbol? Symbol { get; protected set; }

        public string GenerateHead()
        {
            if (Symbol == null)
            {
                return string.Empty;
            }
            StringBuilder sourceBuilder = new();
            sourceBuilder.AppendLine("// <auto-generated>");
            sourceBuilder.AppendLine("#pragma warning disable");
            sourceBuilder.AppendLine("#nullable enable");
            sourceBuilder.AppendLine();
            sourceBuilder.AppendLine($"namespace {Symbol.ContainingNamespace};");
            return sourceBuilder.ToString();
        }
    }
}
